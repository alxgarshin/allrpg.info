class FraymDragDrop{constructor(element,options){if(!element)return!1;if(_(element).hasClass("fraymDragDropApplied"))return!1;const dragDrop=this;this.element=_(element),this.element.addClass("fraymDragDropApplied"),this.options=Object.assign({handler:null,revert:!1,sortable:!1,dragStart:function(){},dragEnd:function(){},dropTargets:[{elementSelector:null,onDrop:function(){}}]},options),this.element.attr("draggable",!0),null!==this.options.handler&&this.element.each((function(){const elementChildren=elAll(":scope > *",this),computedStyle=window.getComputedStyle(this);elementChildren.forEach((child=>{("string"==typeof dragDrop.options.handler?child.matches(dragDrop.options.handler):child===dragDrop.options.handler)||_(child).attr("draggable",!0).on("dragstart",dragDrop.catchAndPreventDragStartEventGettingToParent)}));const handlerElement="string"==typeof dragDrop.options.handler?_(el(dragDrop.options.handler,this)):_(dragDrop.options.handler);handlerElement?.css("cursor","move"),"contents"===computedStyle.display&&handlerElement?.attr("draggable",!0)})),this.element.each((function(){_(this).find("a")?.attr("draggable",!1)})),this.element.on("dragstart",(function(e){e.stopImmediatePropagation();const oldX=e.clientX,oldY=e.clientY;_(this).addClass("dragged").attr("dragLeft",oldX-e.target.offsetLeft).attr("dragTop",oldY-e.target.offsetTop),dragDrop.options.dragStart.call(this,e)})),this.element.on("dragend",(function(e){e.stopImmediatePropagation();const self=_(this);if(!dragDrop.options.revert&&!dragDrop.options.sortable){const newX=e.clientX,newY=e.clientY;self.css("left",newX-self.attr("dragLeft")+"px").css("top",newY-self.attr("dragTop")+"px")}self.removeClass("dragged").attr("dragLeft",null).attr("dragTop",null),dragDrop.options.dragEnd.call(this,e)})),this.options.sortable?this.element.on("dragover",(function(e){e.preventDefault(),e.stopImmediatePropagation();const draggedOverElement=this,draggingElement=el(".dragged");draggedOverElement!==draggingElement&&draggedOverElement.parentElement===draggingElement.parentElement&&dragDrop.element.each((function(){this.contains(draggingElement)&&this.parentElement.insertBefore(draggingElement,draggedOverElement)}))})):this.options.dropTargets.forEach((dropTarget=>{dropTarget.elementSelector&&_(dropTarget.elementSelector).each((function(){_(this).attr("droppable",!0).on("dragover",(function(e){e.preventDefault(),e.stopImmediatePropagation(),e.dataTransfer.dropEffect="move"})).on("drop",(function(e){e.stopImmediatePropagation(),dropTarget.onDrop.call(this,element)}))}))}))}catchAndPreventDragStartEventGettingToParent(e){e.preventDefault(),e.stopImmediatePropagation()}}